// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int          @id @default(autoincrement())
  username        String       @unique
  password        String   
  isAdmin         Boolean      @default(false)
  highscore       Int?
  imageUrl        String?
  nickname        String?
  friend1Pairs    FriendPair[] @relation("Friend1") //friendships where you are friend1
  friend2Pairs    FriendPair[] @relation("Friend2") //friendships where you are friend2
  messages        Message[]
}

model FriendPair {
  id              Int          @id @default(autoincrement())
  friend1Id       Int      
  friend2Id       Int
  friend1         User         @relation("Friend1", fields: [friend1Id], references: [id])
  friend2         User         @relation("Friend2", fields: [friend2Id], references: [id])
  chat            Chat[]
}

model Chat {
  id              Int          @id @default(autoincrement())
  friendPairId    Int
  friendPair      FriendPair   @relation(fields: [friendPairId], references: [id], onDelete: Cascade)
  messages        Message[]
}

model Message {
  id              Int          @id @default(autoincrement())
  chatId          Int
  chat            Chat         @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userId          Int
  user            User         @relation(fields: [userId], references: [id])          
  content         String
  time            DateTime     @default(now())
}